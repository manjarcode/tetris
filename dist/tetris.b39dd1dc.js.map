{"mappings":"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","sources":["src/game.js"],"sourcesContent":["const BLOCK_SIZE = 40\nconst ROWS = 20\nconst COLS = 10\nconst DOWN_ITERATIONS = 5\nconst SPEED = 10\nconst matrix = Array.from({ length: COLS }, () => Array(ROWS).fill(0))\n\n/*\nFichas:\n- Palito\n- T\n- S\n- S inversa\n- L\n- L inversa\n- Cuadrado\n\n*/\n\nfunction getColor(number) {\n  const colors = [\n    \"#FF6B6B\",\n    \"#FF9F1C\",\n    \"#FFD23F\",\n    \"#17C3B2\",\n    \"#227C9D\",\n    \"#8B5CF6\",\n    \"#E6E6EA\"\n  ]\n\n  return colors[number]\n}\n\n\nfunction getDarkerColors(number) {\n  const borders = [\n    \"#C34C4C\", \n    \"#B36D14\", \n    \"#B8962E\", \n    \"#0F8175\", \n    \"#165166\", \n    \"#5A3EAB\", \n    \"#A1A1A5\"\n  ]\n  return borders[number]\n}\n\nfunction random(number) {\n  return Math.round(Math.random()*number)\n}\n\nclass Game {\n  constructor(canvas) {\n    this.matrix = matrix\n    this.drawer = new Drawer(canvas)\n\n\n    this.iteration = 0\n    this.active = new Block(1,1,6, matrix)\n  }\n\n  draw(x, y) {\n    const color = this.matrix[x][y]\n    if (color > 0) {\n      this.drawer.block(x, y, color)\n    }\n  }\n\n  render() {\n    this.table()\n\n    this.drawer.clear()\n    for (let i=0; i<COLS; i++) {\n      for (let j=0; j<ROWS; j++) {\n        this.draw(i, j)\n      }\n    }\n  }\n\n  table() {\n    const table = document.getElementById('matrix')\n    table.innerHTML=\"\"\n    for (let i=0; i<COLS; i++) {\n      const row = document.createElement('tr')\n      for (let j=0; j<ROWS; j++) {\n        const cell = document.createElement('td')\n        cell.textContent= this.matrix[i][j]\n        \n        row.appendChild(cell)\n      }\n\n      table.appendChild(row)\n    }\n  }\n\n  down() {\n    if (this.active.canDown()) {\n      this.active.down()\n    } else {\n      this.active = null\n      this.buildActive()\n    }\n  } \n\n  mustDown() {\n    return this.iteration++ % DOWN_ITERATIONS === 0\n  }\n\n  iterate() {\n    if (this.mustDown()) {\n      this.down()\n    }\n\n    this.render()\n  }\n\n  buildActive() {\n    console.log('build active')\n    const randomX = random(COLS);\n    const randomColor = random(7)\n    this.active = new Block(randomX, 0, randomColor, this.matrix)\n  }\n\n  status() {\n    console.log('active', this.active)\n    console.log('game', this.game)\n  }\n}\n\nclass Block {\n  constructor(x, y, color, matrix) {\n    this.x = x\n    this.y = y\n    this.color = color\n    this.matrix = matrix\n\n  }\n\n  canDown() {\n    const nextY = this.y+1\n    const isOutOfBound = nextY >= ROWS\n    const hasBlockBelow = this.matrix[this.x][nextY] > 0\n\n    return !isOutOfBound && !hasBlockBelow\n  }\n\n  down() {\n    const nextY = this.y + 1\n\n    this.matrix[this.x][this.y] = 0\n    this.matrix[this.x][nextY] = this.color\n    this.y = nextY\n  }\n\n\n}\n\nclass Drawer {\n  constructor(canvas) {\n    this.canvas = canvas\n  }\n\n  block(x, y, color) {\n    const posX = x * 40\n    const posY = y * 40\n\n    this.canvas.fillStyle = getColor(color)\n    this.canvas.fillRect(posX, posY, BLOCK_SIZE, BLOCK_SIZE)\n    this.canvas.strokeStyle = getDarkerColors(color)\n    this.canvas.strokeRect(posX, posY, BLOCK_SIZE, BLOCK_SIZE)\n  }\n\n  clear() {\n    this.canvas.fillStyle=\"white\"\n    this.canvas.fillRect(0,0, COLS*BLOCK_SIZE, ROWS*BLOCK_SIZE)\n  }\n}\n\n\nlet game = null\nwindow.onload = () => {\n  const canvas = document.getElementById(\"game\");\n  const ctx = canvas.getContext(\"2d\"); \n\n  game = new Game(ctx)\n  game.render()\n\n\n  window.setInterval(() => {\n    gameLoop()\n  }, SPEED)\n}\n\nfunction gameLoop() {\n  try{\n    if (!error) {\n      game.iterate()\n    }\n\n  } catch (err) {\n    game.status()\n    error = err\n    console.error(err)\n  }\n}\nlet error = null\n\n\n\ndocument.addEventListener(\"keydown\", ev => {\n\n\n  console.log(ev)\n})"],"names":[],"version":3,"file":"tetris.b39dd1dc.js.map","sourceRoot":"/__parcel_source_root/"}